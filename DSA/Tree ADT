//Constructors:

EmptyTree()
//returns an empty tree

MakeTree(value, left, right)
// returns a new tree where the root has value v, left subtree l, right subtree r

Leaf(v) = MakeTree(v, EmptyTree, EmptyTree)
// This just makes a leaf by adding a node with no left or right subtrees (no children nodes)

//Accessors:

isEmpty(t)
//returns true if t is the empty tree, otherwise returns false. 

root(t)
//returns the value of the root node of the tree t

left(t)
//returns the left subtree of the tree t

right(t)
//returns the right subtree of the tree t


//Constructing a Tree recursively:
MakeTree(33,Leaf (10),MakeTree(33,MakeTree (21, EmptyTree,Leaf(25)),Leaf(1)))


//Reversing a Tree Recursively:
reverseTree(t) {

    if (isEmpty(t))
        return t;
    
    else
        return(MakeTree(root(t), reverseTree(right(t)), reverseTree(left(t))))

}

//Inserting into a Binary Search Tree

insert(v, BST) {
    if (isEmpty(BST)) {
        return Leaf(v);
    }
    else if (v == root(BST)) {
        return "Error: Duplicate value";
    }
    else if (v < root(BST)) {
        left(BST) = insert(v, left(BST));
    }
    else if (v > root(BST)) {
        right(BST) = insert(v, right(BST));
    }
    return BST;
}



//Searching BST's recursively:

isIn(v,BST) {
    if (isEmpty(BST)) {
        return false;
    } else if (v == root(BST)) {
        return true;
    } else if (v < root(BST)) {
        return isIn(v,left(BST));
    } else {
        return isIn(v,right(BST)); // We use else here because if its not equal or less than then it must be more than
    }
}

//Searching BST's iteratively:
isIn(value v , tree t) {
    while ( (not isEmpty(t)) and (v != root(t)) )
        if (v < root(t)){
            t = left(t);
        }
        else {
            t = right(t);
        }
     return (not isEmpty(t))
}

// This while loop would terminate for one of two reasons: either the final t is empty, so the value is not there and function returns false, or v=root(t) which means the value has been found and the function returns true


//Deleting from a BST recursively:

delete(value v, tree t) {

    if (isEmpty(t)) {
        error("item not in tree");
    } else if (v < root(t)) {
        return MakeTree(root(t), delete(v, left(t)), right(t));
    } else if (v > root(t)) {
        return MakeTree(root(t), left(t), delete(v,right(t)));
    } else if (isEmpty(left(t))) { // At this point, we have identified the node that we want to delete
        return right(t);
    } else if (isEmpty(right(t))) {
        return left(t);
    } else {
        return MakeTree(smallestNode(right(t)), left(t), removeSmallestNode(right(t)));
    }
}


//Precondition: t is a non-empty BST
smallestNode (tree t) {
    if (isEmpty(left(t))) {
        return root(t);
    } else {
        return smallestNode(left(t));
    }
}



//Precondition: t is a non-empty BST
removeSmallestNode(tree t) {
    if (isEmpty(left(t))) { // That means current node is the smallest, so remove it
        return right(t);
    } else {
        return MakeTree(root(t), removeSmallestNode(left(t)), right(t));
    }
}


//Checking if a Binary Tree is a BST:

isBST(tree t) {
    if (isEmpty(t)) {
        return true
    } else {
        return (allsmaller(left(t), root(t)) && isBST(left(t)) && allbigger(right(t),root(t)) && isBST(right(t)));
    }
}

allsmaller(tree t, value v) {
    if (isEmpty(t)) {
        return true
    } else {
        return ((root(t) < v) && allsmaller(left(t),v) && allsmaller(right(t),v));
    }
}

allbigger(tree t, value t) {
    if (isEmpty(t)) {
        return true;
    } else {
        return ((root(t) > t) && allbigger(left(t),v) && allbigger(right(t),v));
    }
}