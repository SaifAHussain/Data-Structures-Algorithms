//This will be a naive implementation of the Union-Find data structure

void makeSet(int v) {
    parent[v] = v
}

int find(int v) {
    if (v == parent[v]) {
        return v;
    }

    return find(parent[v]);
}

void union(int a, int b) {
    a = find(a);
    b = find(b);

    if (a != b) {
        parent[b] = a;
    }
}

//This will be an implementation of the Union-Find data structure which uses size of a tree to indicate its depth to help us know which tree should be the child of the root of the other one. 

void makeSet(int v) {
    parent[v] = v;
    size[v] = 1;
}

int find(int v) {
    if (v==parent[v]) {
        return v;
    }

    return parent[v] = find(parent[v]);
}

void union(int a, int b) {
    a = find(a);
    b = find(b);

    if (a != b) {
        if (size[a] < size[b]) {
            swap(a,b);
        }

        parent[b] = a;
        size[a] = size[a] + size[b];
    }
}


//This will be an implementation of the Union-Find data structure which uses RANK as a way to indicate a tree's depth to help us know which tree should be the child of the root of the other one. 


void makeSet(int v) {
    parent[v] = v;
    rank[v] = 0;
}

int find(int v) {
    if (v == parent[v]) {
        return v;
    }

    return parent[v] = find(parent[v]);
}

void union(int a, int b) {
    a = find(a);
    b = find(b);

    if (a != b) {
        if (rank(a) < rank(b)) {
            swap(a,b);
        }

        parent[b] = a;

        if (rank[a] == rank[b]) {
            rank[a]++;
        }
    }
}

